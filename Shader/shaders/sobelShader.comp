#version 430 core
#extension GL_ARB_compute_shader : enable

#define STATE_CALCULATE_KERNELS 0
#define STATE_DRAW_PIXEL 1
#define STATE_UPDATE_SOBEL_CANVAS 2
#define MAX_RADIUS 200
#define SOBEL_CLAMP_FLOAT_VALUE 5.6568
#define SOBEL_CLAMP_UINT8_VALUE 1442.49783362

// mats stored in colum-major order: define column by column
mat3 sobel_kernel_Gx = mat3(
	-1.0, -2.0, -1.0,
	0.0, 0.0, 0.0,
	1.0, 2.0, 1.0
);

mat3 sobel_kernel_Gy = mat3(
	-1.0, 0.0, 1.0,
	-2.0, 0.0, 2.0,
	-1.0, 0.0, 1.0
);

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in; // every local_size_* is by default 1

uniform layout(binding = 0, rgba32f) restrict image2D edited;
uniform layout(binding = 1, rgba32f) readonly image2D canvas;
uniform layout(binding = 2, rgba32f) restrict image2D sobelCanvas;

layout(std430, binding = 2) buffer cursorPos
{
	vec2 cursor_pos;
};

layout(std430, binding = 3) buffer brush_area_pixels
{
	vec4 grid[MAX_RADIUS * MAX_RADIUS];
};

layout(location = 3) uniform int brushRadius;
layout(location = 4) uniform int state;

vec4 edge_pixel(ivec2 uv);
float kernel_mult(ivec2 pixel_uv, int channel, mat3 kernel);

void main()
{
	ivec2 dims = imageSize(canvas);

	ivec2 cursorToGrid = ivec2(gl_WorkGroupID.xy) - ivec2(brushRadius / 2, brushRadius / 2);

	ivec2 base_uv = ivec2(int(cursor_pos.x) - brushRadius / 2, int(dims.y - cursor_pos.y) - brushRadius / 2);

	ivec2 uv = base_uv + ivec2(gl_WorkGroupID.xy);

	uvec3 gwid = gl_WorkGroupID;
	uint gridIndex = gwid.z * gl_NumWorkGroups.y * gl_NumWorkGroups.x + gwid.y * gl_NumWorkGroups.x + gwid.x;

	switch(state)
	{
		case STATE_CALCULATE_KERNELS:
		{
			if(length(cursorToGrid) > brushRadius / 2)
				return;
			grid[gridIndex] = edge_pixel(uv);
		}
		break;

		case STATE_UPDATE_SOBEL_CANVAS:
		{
			// in this case the whole image will be dispatch
			// so the uv doesn't depend on the cursor position but just on the work group invocation ID
			uv = ivec2(gl_GlobalInvocationID.xy);
			vec4 current_edited_color = imageLoad(edited, uv);
			imageStore(sobelCanvas, uv, current_edited_color);
		} break;

		case STATE_DRAW_PIXEL:
		{
			if(length(cursorToGrid) > brushRadius / 2)
				return;
			imageStore(edited, uv, grid[gridIndex]);
		}
		break;
	}
}

vec4 edge_pixel(ivec2 uv)
{
	// imageLoad with an out of boundary coordinate returns an all zeroes vec4
	// so for the edge pixels of the imagedo the kernel multiplication with out of bounds values as for the other pixels

	vec4 result;
	float sum = 0;

	// for each of the rgb channels compute the kernel calculation
	for(int i = 0; i < 3; i++)
	{
		float Gx = kernel_mult(uv, i, sobel_kernel_Gx);
		float Gy = kernel_mult(uv, i, sobel_kernel_Gy);

		// sqrt is a floating point operation
		result[i] = sqrt(Gx * Gx + Gy * Gy / SOBEL_CLAMP_FLOAT_VALUE);
		sum += result[i];
	}

	result.xyz = vec3(sum / 3);

	return result;
}

float kernel_mult(ivec2 pixel_uv, int ch, mat3 kernel)
{
	float kernel_sum = 0;
	ivec2 dims = imageSize(edited);

	for(int y = -1; y < 2; y++)
	{
		for(int x = -1; x < 2; x++)
		{
			ivec2 grid_uv = pixel_uv + ivec2(x, y);

			vec4 current_color = imageLoad(sobelCanvas, ivec2(grid_uv.x, grid_uv.y));

			// float operation because mat3 values are always floating point
			kernel_sum += int(current_color[ch] * kernel[x + 1][1 - y]);
		}
	}

	return kernel_sum;
}