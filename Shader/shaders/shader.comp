#version 430 core
#extension GL_ARB_compute_shader : enable

#define DRAW 0
#define ERASE 1

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in; // every local_size_* is by default 1

uniform layout(binding = 0, rgba32f) restrict image2D edited;
uniform layout(binding = 1, rgba32f) readonly image2D canvas;

layout(std430, binding = 2) buffer cursorPos
{
	vec2 cursor_pos;
};

layout(location = 3) uniform int brushRadius;
layout(location = 4) uniform int drawFlag;

void main()
{
	// get the UV coordinates of the current thread to write to the corresponding location of the texture's image
	// UVs for the image come from the built in shader variables gl_WorkGroupSize
	
	ivec2 dims = imageSize(canvas);

	ivec2 cursorToGrid = ivec2(gl_WorkGroupID.xy) - ivec2(brushRadius / 2, brushRadius / 2);

	if(length(cursorToGrid) > brushRadius / 2)
		return;

	ivec2 base_uv = ivec2(int(cursor_pos.x) - brushRadius, int(dims.y - cursor_pos.y) - brushRadius);

	ivec2 uv = base_uv + ivec2(gl_GlobalInvocationID.xy);

	switch(drawFlag)
	{
		case DRAW:
			imageStore(edited, uv, ivec4(0, 0, 255, 255));
		break;

		case ERASE: {
			vec4 canvas_pixel_color = imageLoad(canvas, ivec2(uv.x, dims.y - uv.y));
			imageStore(edited, uv, canvas_pixel_color);
		} break;
	}
}